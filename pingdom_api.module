<?php
/**
 * @file
 * Code for the Pingdom API module.
 */

include_once 'pingdom_api.features.inc';

/**
 * Implements hook_wsclient_service_load().
 */
function pingdom_api_wsclient_service_load($services) {
  $pingdom_credentials = variable_get('pingdom_api_username') . ':' . variable_get('pingdom_api_pass');
  $services['pingdom']->settings['curl options'][CURLOPT_USERPWD] = $pingdom_credentials;
  $pingdom_appkey = variable_get('pingdom_api_appkey');
  $services['pingdom']->settings['curl options'][CURLOPT_HTTPHEADER] = array("App-Key: " . $pingdom_appkey);
}

/**
 * Generic function to access any resource from the Pingdom API.
 *
 * @param string $httpmethod
 *   GET, POST, PUT, or DELETE.
 * @param string $method
 *   The method being called on the resource.
 * @param array $params
 *   Parameters to send as part of the request.
 * @param string $url_args
 *   Additional URL arguments for some methods.
 */
function pingdom_api_rest_request($httpmethod, $method, $params = array(), $url_args = array()) {
  $service = wsclient_service_load('pingdom');
  $method = check_plain($method);
  $query = '';
  if (!empty($url_args)) {
    $query .= '/' . implode('/', $url_args);
  }
  if (!empty($params)) {
    $query .= "?";
    $query .= http_build_query($params);
  }
  switch ($httpmethod) {
    case 'GET':
      $result = $service->rest_request_get($method . $query);
      return $result;

    case 'POST':
      $result = $service->rest_request_post($method . $query);
      return $result;

    case 'PUT':
      $result = $service->rest_request_put($method . $query);
      return $result;

    case 'DELETE':
      $result = $service->rest_request_delete($method . $query);
      return $result;

    default:
      drupal_set_message(t('Pingdom API: The specified HTTP method, "!httpmethod", is not supported', array('!httpmethod' => $httpmethod)), 'warning');
      break;

  }

}

/**
 * Get a list of Pingdom checks.
 *
 * This function takes 1.5 - 2.5 seconds to get the full check list from the
 *   Pingdom API (on an account with ~120 checks).
 *
 * @param int $limit
 *   Limits the number of returned probes to the specified quantity.
 *   (Max value is 25000).
 * @param int $offset
 *   Offset for listing. (Requires limit).
 *
 * @return array
 *   A multidimensional array with the following sub-arrays:
 *   'checks' and 'counts'.
 *
 *   'checks' includes the metadata about ... the checks.
 *
 *   'counts' includes metadata about the number of checks.
 */
function pingdom_api_wsclient_get_check_list($limit = 25000, $offset = 0) {
  $service = wsclient_service_load('pingdom');
  $result = $service->get_check_list($limit, $offset);
  variable_set('pingdom_api_check_list', $result);
  return $result;
}

/**
 * Modify multiple checks.
 *
 * @param bool $paused
 *   Pause the check.
 * @param int $resolution
 *   Check resolution (in minutes). Acceptable values: 1, 5, 15, 30, 60.
 * @param string $checkids
 *   Comma-separated list of check IDs.
 */
function pingdom_api_wsclient_modify_multiple_checks($paused, $resolution, $checkids) {
  $service = wsclient_service_load('pingdom');
  $result = $service->modify_multiple_checks($paused, $resolution, $checkids);
  return $result;
}

/**
 * Implements hook_menu().
 */
function pingdom_api_menu() {
  $items['admin/config/services/pingdomapi'] = array(
    'title' => 'Pingdom API',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pingdom_api_config_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Configuration form.
 */
function pingdom_api_config_form($form, &$form_state) {
  $form['authentication'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pingdom API Authentication'),
    '#description' => t('Enter your Pingdom API credentials below. See the <a href="@pingdomapidocs">Pingdom API Documentation</a> for more information.', array('@pingdomapidocs' => 'https://www.pingdom.com/features/api/documentation/')),
  );
  $form['authentication']['pingdom_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Pingdom User Name'),
    '#default_value' => variable_get('pingdom_api_username'),
  );
  $form['authentication']['pingdom_api_pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => variable_get('pingdom_api_pass'),
  );
  $form['authentication']['pingdom_api_appkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Key'),
    '#default_value' => variable_get('pingdom_api_appkey'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function pingdom_api_permission() {
  return array(
    'get pingdom check list' => array(
      'title' => t('Get Check List from Pingdom'),
    ),
    'pause pingdom checks' => array(
      'title' => t('Pause Pingdom Checks'),
    ),
  );
}
